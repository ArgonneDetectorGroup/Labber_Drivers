##################################################################################
# This file is automatically generated!!!!!! DO NOT EDIT!!!!                     #
# Make changes to the .j2 template file, and then run "yasha <template_name>.j2" #
##################################################################################

[General settings]

# The name is shown in all the configuration windows
name: Lakeshore 372

# The version string should be updated whenever changes are made to this config file
version: 0.1

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.

driver_path: Lakeshore_372
startup: Do nothing
interface: TCPIP
address: 192.168.1.2



[Model and options]
# The option section allow instruments with different options to use the same driver

# Check instrument model id at startup (True or False). Default is False
check_model: False

model_id_1: MODEL372

model_str_1: Lakeshore 372

{% set scanner = scanner_dict[scanner_type] %}
##############################################
# Scanner model installed: {{scanner_type}}  #
##############################################

# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = True

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: False

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 3

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication. 
query_instr_errors: False

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
error_cmd: 

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
init: 

# Final commands sent to the instrument when closing the driver
final: 

# Use specific TCIPIP socket port
tcpip_specify_port: True

# TCPIP socket port
tcpip_port: 7777

# Define quantities in sections. The section name should be the same as the "name" value
# The following keywords are allowed:
#   name:          Quantity name
#   unit:          Quantity unit
#   enabled:	   Determines wether the control is enabled from start.  Default is True	
#   datatype:      The data type should be one of DOUBLE, BOOLEAN, COMBO or STRING
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   group:         Name of the group where the control belongs.
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   sweep_cmd:     Command used to sweep data. Use <sr> for sweep rate, and <*> for the value.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?


# Channel A
[Temperature A]
unit: K
datatype: DOUBLE
permission: READ
get_cmd: KRDG? A
group: Control Input

[Resistance A]
unit: Ohm
datatype: DOUBLE
permission: READ
get_cmd: SRDG? A
group: Control Input

[Power A]
unit: W
datatype: DOUBLE
permission: READ
get_cmd: RDGPWR? A
group: Control Input

[Quadrature A]
unit: Ohms
datatype: DOUBLE
permission: READ
get_cmd: QRDG? A
group: Control Input

[Frequency A]
datatype: COMBO
permission: BOTH
{% for freq in frequencies %}
combo_def_{{loop.index}}: {{freq}}
cmd_def_{{loop.index}}: {{loop.index}}
{% endfor %}
set_cmd: FREQ A,<*>
get_cmd: FREQ? A
group: Control Input

[Status A]
datatype: COMBO
permission: BOTH
combo_def_1: Disabled
combo_def_2: Enabled
cmd_def_1: 0
cmd_def_2: 1
group: Control Input

[Pause Time A]
datatype: DOUBLE
unit: seconds
permission: BOTH
low_lim: 3
high_lim: 200
group: Control Input

[Calibration Curve A]
datatype: COMBO
permission: BOTH
{% for crv in range(60) %}
combo_def_{{loop.index}}: {{crv}}
cmd_def_{{loop.index}}: {{crv}}
{% endfor %}
set_cmd: INCRV A,<*>
get_cmd: INCRV? A
group: Control Input

[Temperature Coefficient A]
datatype: COMBO
permission: BOTH
combo_def_1: Negative
combo_def_2: Positive
cmd_def_1: 1
cmd_def_2: 2
group: Control Input

[Excitation Value A]
datatype: COMBO
permission: BOTH
{% for range in ranges_A %}
combo_def_{{loop.index}}: {{range}}
cmd_def_{{loop.index}}: {{loop.index}}
{% endfor %}
group: Control Input

[Excitation Status A]
datatype: COMBO
permission: BOTH
combo_def_1: On
combo_def_2: Off
cmd_def_1: 0
cmd_def_2: 1
group: Control Input

[Units A]
datatype: COMBO
permission: BOTH
combo_def_1: Kelvin
combo_def_2: Ohms
cmd_def_1: 1
cmd_def_2: 2
group: Control Input

[Active Channel]
datatype: COMBO
permission: BOTH
{% for ch in scanner['channels'] %}
combo_def_{{ch}}: {{ch}}
cmd_def_{{ch}}: {{ch}}
{% endfor %}
group: Measurement Input

#Active Channel values for convenience
[Temperature]
unit: K
datatype: DOUBLE
permission: READ
get_cmd: KRDG? <*>
group: Measurement Input

[Resistance]
unit: Ohm
datatype: DOUBLE
permission: READ
get_cmd: SRDG? <*>
group: Measurement Input

[Power]
unit: W
datatype: DOUBLE
permission: READ
get_cmd: RDGPWR? <*>
group: Measurement Input

[Quadrature]
unit: Ohms
datatype: DOUBLE
permission: READ
get_cmd: QRDG? <*>
group: Measurement Input

[Frequency]
datatype: COMBO
permission: BOTH
{% for freq in frequencies %}
combo_def_{{loop.index}}: {{freq}}
cmd_def_{{loop.index}}: {{loop.index}}
{% endfor %}
set_cmd: FREQ 0,<*>
get_cmd: FREQ? 0
group: Measurement Input

{% for ch in scanner['channels'] %}
[Temperature {{ch}}]
unit: K
datatype: DOUBLE
permission: READ
get_cmd: KRDG? {{ch}}
group: Channel {{ch}}

[Resistance {{ch}}]
unit: Ohm
datatype: DOUBLE
permission: READ
get_cmd: SRDG? {{ch}}
group: Channel {{ch}}

[Power {{ch}}]
unit: W
datatype: DOUBLE
permission: READ
get_cmd: RDGPWR? {{ch}}
group: Channel {{ch}}

[Quadrature {{ch}}]
unit: Ohms
datatype: DOUBLE
permission: READ
get_cmd: QRDG? {{ch}}
group: Channel {{ch}}

[Status {{ch}}]
datatype: COMBO
permission: BOTH
combo_def_1: Disabled
combo_def_2: Enabled
cmd_def_1: 0
cmd_def_2: 1
group: Channel {{ch}}

[Dwell Time {{ch}}]
datatype: DOUBLE
unit: seconds
permission: BOTH
low_lim: 1
high_lim: 200
group: Channel {{ch}}

[Pause Time {{ch}}]
datatype: DOUBLE
unit: seconds
permission: BOTH
low_lim: 3
high_lim: 200
group: Channel {{ch}}

[Calibration Curve {{ch}}]
datatype: COMBO
permission: BOTH
{% for crv in range(60) %}
combo_def_{{loop.index}}: {{crv}}
cmd_def_{{loop.index}}: {{crv}}
{% endfor %}
set_cmd: INCRV {{ch}},<*>
get_cmd: INCRV? {{ch}}
group: Channel {{ch}}

[Temperature Coefficient {{ch}}]
datatype: COMBO
permission: BOTH
combo_def_1: Negative
combo_def_2: Positive
cmd_def_1: 1
cmd_def_2: 2
group: Channel {{ch}}

[Excitation Mode {{ch}}]
datatype: COMBO
permission: BOTH
combo_def_1: Voltage
combo_def_2: Current
cmd_def_1: 0
cmd_def_2: 1
group: Channel {{ch}}

[Excitation Value {{ch}}]
datatype: COMBO
permission: BOTH
{% for volt, amp in scanner['voltage_range'] | zip(scanner['current_range']) %}
combo_def_{{loop.index}}: {{'%s, %s'%(volt, amp)}}
cmd_def_{{loop.index}}: {{loop.index}}
{% endfor %}
group: Channel {{ch}}

[Excitation Status {{ch}}]
datatype: COMBO
permission: BOTH
combo_def_1: On
combo_def_2: Off
cmd_def_1: 0
cmd_def_2: 1
group: Channel {{ch}}

[Units {{ch}}]
datatype: COMBO
permission: BOTH
combo_def_1: Kelvin
combo_def_2: Ohms
cmd_def_1: 1
cmd_def_2: 2
group: Channel {{ch}}

[Autorange {{ch}}]
datatype: COMBO
permission: BOTH
combo_def_1: Off
combo_def_2: On
cmd_def_1: 0
cmd_def_2: 1
group: Channel {{ch}}

[Range {{ch}}]
datatype: COMBO
permission: BOTH
{% for range in ranges %}
combo_def_{{loop.index}}: {{range}}
cmd_def_{{loop.index}}: {{loop.index}}
{% endfor %}
group: Channel {{ch}}

{% endfor %}